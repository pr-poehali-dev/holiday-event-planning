import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤...\n');

console.log('üì¶ –®–∞–≥ 1: –°–±–æ—Ä–∫–∞ —á–µ—Ä–µ–∑ Vite...');
try {
  execSync('npm run build', { stdio: 'inherit' });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
  process.exit(1);
}

console.log('\nüìù –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤...');

const distDir = path.join(__dirname, 'dist');
const standaloneDir = path.join(__dirname, 'standalone-html');

if (fs.existsSync(standaloneDir)) {
  fs.rmSync(standaloneDir, { recursive: true, force: true });
}
fs.mkdirSync(standaloneDir, { recursive: true });

const indexHtml = fs.readFileSync(path.join(distDir, 'index.html'), 'utf-8');

let cssContent = '';
let jsContent = '';

const cssMatches = indexHtml.matchAll(/<link[^>]*href="([^"]*\.css)"[^>]*>/g);
for (const match of cssMatches) {
  const cssPath = path.join(distDir, match[1]);
  if (fs.existsSync(cssPath)) {
    cssContent += fs.readFileSync(cssPath, 'utf-8');
  }
}

const jsMatches = indexHtml.matchAll(/<script[^>]*src="([^"]*\.js)"[^>]*>/g);
for (const match of jsMatches) {
  const jsPath = path.join(distDir, match[1]);
  if (fs.existsSync(jsPath)) {
    jsContent += fs.readFileSync(jsPath, 'utf-8');
  }
}

console.log(`   CSS —Ä–∞–∑–º–µ—Ä: ${(cssContent.length / 1024).toFixed(2)} KB`);
console.log(`   JS —Ä–∞–∑–º–µ—Ä: ${(jsContent.length / 1024).toFixed(2)} KB`);

function convertImageToBase64(imagePath) {
  if (!fs.existsSync(imagePath)) return null;
  
  const ext = path.extname(imagePath).toLowerCase();
  const mimeTypes = {
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.webp': 'image/webp'
  };
  
  const mimeType = mimeTypes[ext] || 'image/jpeg';
  const imageBuffer = fs.readFileSync(imagePath);
  const base64 = imageBuffer.toString('base64');
  
  return `data:${mimeType};base64,${base64}`;
}

const assetsDir = path.join(distDir, 'assets');
const imageAssets = {};

if (fs.existsSync(assetsDir)) {
  const files = fs.readdirSync(assetsDir);
  files.forEach(file => {
    const ext = path.extname(file).toLowerCase();
    if (['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'].includes(ext)) {
      const filePath = path.join(assetsDir, file);
      const base64 = convertImageToBase64(filePath);
      if (base64) {
        imageAssets[`/assets/${file}`] = base64;
        imageAssets[`assets/${file}`] = base64;
      }
    }
  });
  console.log(`   üì∑ –ù–∞–π–¥–µ–Ω–æ ${Object.keys(imageAssets).length / 2} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è`);
}

let modifiedCss = cssContent;
Object.entries(imageAssets).forEach(([path, base64]) => {
  modifiedCss = modifiedCss.replace(new RegExp(path.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), base64);
});

const pages = [
  { name: 'index', title: '–î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞ - –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π', route: '' },
  { name: 'programs', title: '–ü—Ä–æ–≥—Ä–∞–º–º—ã - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'programs' },
  { name: 'characters', title: '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'characters' },
  { name: 'prices', title: '–¶–µ–Ω—ã - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'prices' },
  { name: 'gallery', title: '–ì–∞–ª–µ—Ä–µ—è - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'gallery' },
  { name: 'reviews', title: '–û—Ç–∑—ã–≤—ã - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'reviews' },
  { name: 'contacts', title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã - –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞', route: 'contacts' }
];

console.log('\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤:');

pages.forEach(page => {
  const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${page.title}</title>
  <meta name="description" content="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –î–µ–¥ –ú–æ—Ä–æ–∑ –∏ –°–Ω–µ–≥—É—Ä–æ—á–∫–∞ –Ω–∞ –¥–æ–º –≤ –ú–æ—Å–∫–≤–µ. –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 2 –¥–æ 12 –ª–µ—Ç. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–µ–∑–¥ –ø–æ –≤—Å–µ–π –ú–æ—Å–∫–≤–µ.">
  <style>${modifiedCss}</style>
</head>
<body>
  <div id="root"></div>
  <script>window.__INITIAL_ROUTE__ = '/${page.route}';</script>
  <script type="module">${jsContent}</script>
</body>
</html>`;

  const fileName = page.name === 'index' ? 'index.html' : `${page.name}.html`;
  const filePath = path.join(standaloneDir, fileName);
  fs.writeFileSync(filePath, htmlContent);
  
  const fileSize = (fs.statSync(filePath).size / 1024).toFixed(2);
  console.log(`   ‚úÖ ${fileName} (${fileSize} KB)`);
});

const totalSize = fs.readdirSync(standaloneDir)
  .reduce((sum, file) => {
    const filePath = path.join(standaloneDir, file);
    return sum + fs.statSync(filePath).size;
  }, 0);

console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ HTML —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: standalone-html/');
console.log(`\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024 / 1024).toFixed(2)} MB (${pages.length} —Ñ–∞–π–ª–æ–≤)`);
console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
console.log('   standalone-html/');
console.log('   ‚îú‚îÄ‚îÄ index.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îú‚îÄ‚îÄ programs.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îú‚îÄ‚îÄ characters.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îú‚îÄ‚îÄ prices.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îú‚îÄ‚îÄ gallery.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îú‚îÄ‚îÄ reviews.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('   ‚îî‚îÄ‚îÄ contacts.html (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π)');
console.log('\nüí° –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å CSS, JS –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è');
console.log('üí° –§–∞–π–ª—ã –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞');
console.log('üí° –†–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞');
